//------------------------------Model construction----------------------------//
model1D(points,R,T,scheme) =
    (route1D(points,R,T,scheme) : buildScheme1D(points,R,T)) ~ si.bus(points);

model2D(X,Y,r,t,scheme) =
    (route2D(X,Y,r,t,scheme) : buildScheme2D(X,Y,r,t)) ~ si.bus(X*Y);

//--------------------------------Routing-------------------------------//  
route1D(points, R, T) = route(points*2+points*nCoeffs, points*nInputs,
                                par(x, nPoints, connections(x)))
with
{
    connections(x) =  par(k,nCoeffs,x*nCoeffs+k+1,C(x,k+1)),
                      P(x) + points, C(x,0),
                      par(i, nNeighbors, P(x),C(x-R+i,nInputs-1-i));

    P(x) = x+1 + nCoeffs*points;
    C(x,count) = (1 + count + (x*nInputs)) * (x>=0) * (x<points);

    nNeighbors = 2*R+1;
    nCoeffs = nNeighbors*(T+1);
    nInputs = nNeighbors+1+nCoeffs;
};

route2D(X, Y, R, T) = route(nPoints*2+nPoints*nCoeffs, nPoints*nInputs,
                                par(x, X, par(y, Y, connections(x,y))))
with
{
    connections(x,y) =  P(x,y) + nPoints, C(x,y,0),
                        par(k,nCoeffs,(x*Y+y)*nCoeffs+k+1,C(x,y,k+1)),
                        par(j,nNeighborsXY,
                            par(i,nNeighborsXY,
                                P(x,y),C(x+i-R,y+j-R,nInputs-1-(i*nNeighborsXY+j))));

    P(x,y) = x*Y+y+1 + nCoeffs*nPoints;
    C(x,y,count) = (1 + count + (x*Y+y)*nInputs) * (x>=0) * (x<X) * (y>=0) * (y<Y);

    nNeighborsXY = 2*R+1;
    nNeighbors = nNeighborsXY^2;
    nCoeffs = nNeighbors*(T+1);
    nInputs = nNeighbors+1+nCoeffs;
    nPoints = X*Y;
};

//-------------------------------Scheme operations----------------------------//
schemePoint(R,T,D) = routing:operations:>_
with
{
    nNeighbors = (2*R+1)^D;
    routing =
        route(nNeighbors*(T+1)+nNeighbors+1,2*nNeighbors*(T+1)+1,
            (1,1),
            par(t,T+1,
                par(i,nNeighbors,i+t*nNeighbors+2,2*(i+t*nNeighbors)+3,
                                i+nNeighbors*(T+1)+2,2*(i+t*nNeighbors)+2)));
    operations = _,par(t,T+1,
                    par(i,nNeighbors,(_@t),_:*));
};

buildScheme1D(points,R,T) =
    par (x, points,schemePoint(R,T,1));

buildScheme2D(pointsX,pointsY,R,T) =
    par (x, pointsX,
        par(y,pointsY, schemePoint(R,T,2)));

//--------------------------------Interpolation-------------------------------//
stairsInterp1D(points,point) = par(i,points,_*select2(i==point,0,1));
stairsInterp2D(X,Y,pointX,pointY) = par(i,X,
    par(j,Y,_*select2((i==pointX) & (j==pointY),0,1)));

linInterp1D(points,point) = par(i,points,_*select2(
        i==int(point), select2(i==int(point+1),0,fraction),(1-fraction)))
with
{
    fraction = ma.frac(point);
};

linInterp2D(X,Y,pointX,pointY) =
par(i,X,
    par(j,Y,_*
        select2((i==intX) & (j==intY),
            select2((i==(intX+1)) & (j==intY),
                select2((i==intX) & (j==(intY+1)),
                    select2((i==(intX+1)) & (j==(intY+1)),
                        0,
                        fractionX*fractionY),
                    (1-fractionX)*fractionY),
                fractionX*(1-fractionY)),
            (1-fractionX)*(1-fractionY))))
with
{
    fractionX = ma.frac(pointX);
    fractionY = ma.frac(pointY);
    intX = int(pointX);
    intY = int(pointY);
};

stairsInterp1DOut(points,point) = ba.selectn(points,point);
stairsInterp2DOut(X,Y,pointX,pointY) = ba.selectn(X*Y,pointY+pointX*Y);

linInterp1DOut(points,point) = linInterp1D(points,point):>_;
linInterp2DOut(X,Y,pointX,pointY) = linInterp2D(X,Y,pointX,pointY):>_;

//----------------------------------Force---------------------------------//
hammer(coeff,omega0Sqr,sigma0,kH,alpha,K,offset,fIn) =
    (hammerForce<:hammerModel(fIn,K,offset,_),_)~_:!,_*coeff
with
{
    hammerModel(in,K,offset) =
        (_,_,_*forceCoeff,in :> _) ~ (_ <: A*_,B*_') :_-offset;
    hammerForce(uh,u)=select2((uh-u)>0,0,((uh-u)^alpha)*(-kH));
    A = (2-omega0Sqr^2*K^2)/(1+sigma0*K);
    B = (-1)*(1-sigma0*K)/(1+sigma0*K);
    forceCoeff = K^2/(1+sigma0*K);
};

bow(vb,coeff,a,timeStep) = _:phi*(-coeff)
with
{
    phi(u) = 1.41*a*dVel(u)*exp(-a*dVel(u)*dVel(u)+0.5);
    dVel(x) = select2(vb==0,(x-x')/timeStep - vb,0);
};
